// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Proto/Common.proto

#ifndef PROTOBUF_Proto_2fCommon_2eproto__INCLUDED
#define PROTOBUF_Proto_2fCommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Proto_2fCommon_2eproto();
void protobuf_AssignDesc_Proto_2fCommon_2eproto();
void protobuf_ShutdownFile_Proto_2fCommon_2eproto();

class Property;
class SystemObject;
class Object;
class System;

enum SystemType {
  Null = 0,
  Generic = 1,
  AI = 2,
  Animation = 4,
  Audio = 8,
  Graphic = 16,
  Gui = 32,
  Input = 64,
  Network = 128,
  Physic = 256
};
bool SystemType_IsValid(int value);
const SystemType SystemType_MIN = Null;
const SystemType SystemType_MAX = Physic;
const int SystemType_ARRAYSIZE = SystemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemType_descriptor();
inline const ::std::string& SystemType_Name(SystemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemType_descriptor(), value);
}
inline bool SystemType_Parse(
    const ::std::string& name, SystemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemType>(
    SystemType_descriptor(), name, value);
}
// ===================================================================

class Property : public ::google::protobuf::Message {
 public:
  Property();
  virtual ~Property();

  Property(const Property& from);

  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Property& default_instance();

  void Swap(Property* other);

  // implements Message ----------------------------------------------

  Property* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Property& from);
  void MergeFrom(const Property& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated bytes value = 2;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value(int index) const;
  inline ::std::string* mutable_value(int index);
  inline void set_value(int index, const ::std::string& value);
  inline void set_value(int index, const char* value);
  inline void set_value(int index, const void* value, size_t size);
  inline ::std::string* add_value();
  inline void add_value(const ::std::string& value);
  inline void add_value(const char* value);
  inline void add_value(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_value();

  // @@protoc_insertion_point(class_scope:Proto.Property)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Proto_2fCommon_2eproto();
  friend void protobuf_AssignDesc_Proto_2fCommon_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fCommon_2eproto();

  void InitAsDefaultInstance();
  static Property* default_instance_;
};
// -------------------------------------------------------------------

class SystemObject : public ::google::protobuf::Message {
 public:
  SystemObject();
  virtual ~SystemObject();

  SystemObject(const SystemObject& from);

  inline SystemObject& operator=(const SystemObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemObject& default_instance();

  void Swap(SystemObject* other);

  // implements Message ----------------------------------------------

  SystemObject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SystemObject& from);
  void MergeFrom(const SystemObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required .Proto.SystemType systemType = 2;
  inline bool has_systemtype() const;
  inline void clear_systemtype();
  static const int kSystemTypeFieldNumber = 2;
  inline ::Proto::SystemType systemtype() const;
  inline void set_systemtype(::Proto::SystemType value);

  // repeated .Proto.Property properties = 3;
  inline int properties_size() const;
  inline void clear_properties();
  static const int kPropertiesFieldNumber = 3;
  inline const ::Proto::Property& properties(int index) const;
  inline ::Proto::Property* mutable_properties(int index);
  inline ::Proto::Property* add_properties();
  inline const ::google::protobuf::RepeatedPtrField< ::Proto::Property >&
      properties() const;
  inline ::google::protobuf::RepeatedPtrField< ::Proto::Property >*
      mutable_properties();

  // @@protoc_insertion_point(class_scope:Proto.SystemObject)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_systemtype();
  inline void clear_has_systemtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* type_;
  ::google::protobuf::RepeatedPtrField< ::Proto::Property > properties_;
  int systemtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Proto_2fCommon_2eproto();
  friend void protobuf_AssignDesc_Proto_2fCommon_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fCommon_2eproto();

  void InitAsDefaultInstance();
  static SystemObject* default_instance_;
};
// -------------------------------------------------------------------

class Object : public ::google::protobuf::Message {
 public:
  Object();
  virtual ~Object();

  Object(const Object& from);

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Object& default_instance();

  void Swap(Object* other);

  // implements Message ----------------------------------------------

  Object* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string parent = 3;
  inline bool has_parent() const;
  inline void clear_parent();
  static const int kParentFieldNumber = 3;
  inline const ::std::string& parent() const;
  inline void set_parent(const ::std::string& value);
  inline void set_parent(const char* value);
  inline void set_parent(const char* value, size_t size);
  inline ::std::string* mutable_parent();
  inline ::std::string* release_parent();
  inline void set_allocated_parent(::std::string* parent);

  // repeated .Proto.SystemObject systemObjects = 4;
  inline int systemobjects_size() const;
  inline void clear_systemobjects();
  static const int kSystemObjectsFieldNumber = 4;
  inline const ::Proto::SystemObject& systemobjects(int index) const;
  inline ::Proto::SystemObject* mutable_systemobjects(int index);
  inline ::Proto::SystemObject* add_systemobjects();
  inline const ::google::protobuf::RepeatedPtrField< ::Proto::SystemObject >&
      systemobjects() const;
  inline ::google::protobuf::RepeatedPtrField< ::Proto::SystemObject >*
      mutable_systemobjects();

  // @@protoc_insertion_point(class_scope:Proto.Object)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_parent();
  inline void clear_has_parent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* name_;
  ::std::string* parent_;
  ::google::protobuf::RepeatedPtrField< ::Proto::SystemObject > systemobjects_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Proto_2fCommon_2eproto();
  friend void protobuf_AssignDesc_Proto_2fCommon_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fCommon_2eproto();

  void InitAsDefaultInstance();
  static Object* default_instance_;
};
// -------------------------------------------------------------------

class System : public ::google::protobuf::Message {
 public:
  System();
  virtual ~System();

  System(const System& from);

  inline System& operator=(const System& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const System& default_instance();

  void Swap(System* other);

  // implements Message ----------------------------------------------

  System* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const System& from);
  void MergeFrom(const System& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Proto.SystemType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Proto::SystemType type() const;
  inline void set_type(::Proto::SystemType value);

  // repeated .Proto.Property properties = 2;
  inline int properties_size() const;
  inline void clear_properties();
  static const int kPropertiesFieldNumber = 2;
  inline const ::Proto::Property& properties(int index) const;
  inline ::Proto::Property* mutable_properties(int index);
  inline ::Proto::Property* add_properties();
  inline const ::google::protobuf::RepeatedPtrField< ::Proto::Property >&
      properties() const;
  inline ::google::protobuf::RepeatedPtrField< ::Proto::Property >*
      mutable_properties();

  // @@protoc_insertion_point(class_scope:Proto.System)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Proto::Property > properties_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Proto_2fCommon_2eproto();
  friend void protobuf_AssignDesc_Proto_2fCommon_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fCommon_2eproto();

  void InitAsDefaultInstance();
  static System* default_instance_;
};
// ===================================================================


// ===================================================================

// Property

// required string name = 1;
inline bool Property::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Property::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Property::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Property::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Property::name() const {
  return *name_;
}
inline void Property::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Property::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Property::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Property::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Property::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Property::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated bytes value = 2;
inline int Property::value_size() const {
  return value_.size();
}
inline void Property::clear_value() {
  value_.Clear();
}
inline const ::std::string& Property::value(int index) const {
  return value_.Get(index);
}
inline ::std::string* Property::mutable_value(int index) {
  return value_.Mutable(index);
}
inline void Property::set_value(int index, const ::std::string& value) {
  value_.Mutable(index)->assign(value);
}
inline void Property::set_value(int index, const char* value) {
  value_.Mutable(index)->assign(value);
}
inline void Property::set_value(int index, const void* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Property::add_value() {
  return value_.Add();
}
inline void Property::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
}
inline void Property::add_value(const char* value) {
  value_.Add()->assign(value);
}
inline void Property::add_value(const void* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Property::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Property::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// SystemObject

// required string type = 1;
inline bool SystemObject::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemObject::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SystemObject::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SystemObject::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& SystemObject::type() const {
  return *type_;
}
inline void SystemObject::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void SystemObject::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void SystemObject::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SystemObject::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* SystemObject::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SystemObject::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .Proto.SystemType systemType = 2;
inline bool SystemObject::has_systemtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemObject::set_has_systemtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SystemObject::clear_has_systemtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SystemObject::clear_systemtype() {
  systemtype_ = 0;
  clear_has_systemtype();
}
inline ::Proto::SystemType SystemObject::systemtype() const {
  return static_cast< ::Proto::SystemType >(systemtype_);
}
inline void SystemObject::set_systemtype(::Proto::SystemType value) {
  assert(::Proto::SystemType_IsValid(value));
  set_has_systemtype();
  systemtype_ = value;
}

// repeated .Proto.Property properties = 3;
inline int SystemObject::properties_size() const {
  return properties_.size();
}
inline void SystemObject::clear_properties() {
  properties_.Clear();
}
inline const ::Proto::Property& SystemObject::properties(int index) const {
  return properties_.Get(index);
}
inline ::Proto::Property* SystemObject::mutable_properties(int index) {
  return properties_.Mutable(index);
}
inline ::Proto::Property* SystemObject::add_properties() {
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Proto::Property >&
SystemObject::properties() const {
  return properties_;
}
inline ::google::protobuf::RepeatedPtrField< ::Proto::Property >*
SystemObject::mutable_properties() {
  return &properties_;
}

// -------------------------------------------------------------------

// Object

// required string id = 1;
inline bool Object::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Object::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Object::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Object::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Object::id() const {
  return *id_;
}
inline void Object::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Object::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Object::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Object::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Object::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Object::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name = 2;
inline bool Object::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Object::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Object::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Object::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Object::name() const {
  return *name_;
}
inline void Object::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Object::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Object::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Object::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Object::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Object::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string parent = 3;
inline bool Object::has_parent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Object::set_has_parent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Object::clear_has_parent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Object::clear_parent() {
  if (parent_ != &::google::protobuf::internal::kEmptyString) {
    parent_->clear();
  }
  clear_has_parent();
}
inline const ::std::string& Object::parent() const {
  return *parent_;
}
inline void Object::set_parent(const ::std::string& value) {
  set_has_parent();
  if (parent_ == &::google::protobuf::internal::kEmptyString) {
    parent_ = new ::std::string;
  }
  parent_->assign(value);
}
inline void Object::set_parent(const char* value) {
  set_has_parent();
  if (parent_ == &::google::protobuf::internal::kEmptyString) {
    parent_ = new ::std::string;
  }
  parent_->assign(value);
}
inline void Object::set_parent(const char* value, size_t size) {
  set_has_parent();
  if (parent_ == &::google::protobuf::internal::kEmptyString) {
    parent_ = new ::std::string;
  }
  parent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Object::mutable_parent() {
  set_has_parent();
  if (parent_ == &::google::protobuf::internal::kEmptyString) {
    parent_ = new ::std::string;
  }
  return parent_;
}
inline ::std::string* Object::release_parent() {
  clear_has_parent();
  if (parent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = parent_;
    parent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Object::set_allocated_parent(::std::string* parent) {
  if (parent_ != &::google::protobuf::internal::kEmptyString) {
    delete parent_;
  }
  if (parent) {
    set_has_parent();
    parent_ = parent;
  } else {
    clear_has_parent();
    parent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .Proto.SystemObject systemObjects = 4;
inline int Object::systemobjects_size() const {
  return systemobjects_.size();
}
inline void Object::clear_systemobjects() {
  systemobjects_.Clear();
}
inline const ::Proto::SystemObject& Object::systemobjects(int index) const {
  return systemobjects_.Get(index);
}
inline ::Proto::SystemObject* Object::mutable_systemobjects(int index) {
  return systemobjects_.Mutable(index);
}
inline ::Proto::SystemObject* Object::add_systemobjects() {
  return systemobjects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Proto::SystemObject >&
Object::systemobjects() const {
  return systemobjects_;
}
inline ::google::protobuf::RepeatedPtrField< ::Proto::SystemObject >*
Object::mutable_systemobjects() {
  return &systemobjects_;
}

// -------------------------------------------------------------------

// System

// required .Proto.SystemType type = 1;
inline bool System::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void System::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void System::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void System::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Proto::SystemType System::type() const {
  return static_cast< ::Proto::SystemType >(type_);
}
inline void System::set_type(::Proto::SystemType value) {
  assert(::Proto::SystemType_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .Proto.Property properties = 2;
inline int System::properties_size() const {
  return properties_.size();
}
inline void System::clear_properties() {
  properties_.Clear();
}
inline const ::Proto::Property& System::properties(int index) const {
  return properties_.Get(index);
}
inline ::Proto::Property* System::mutable_properties(int index) {
  return properties_.Mutable(index);
}
inline ::Proto::Property* System::add_properties() {
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Proto::Property >&
System::properties() const {
  return properties_;
}
inline ::google::protobuf::RepeatedPtrField< ::Proto::Property >*
System::mutable_properties() {
  return &properties_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::SystemType>() {
  return ::Proto::SystemType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Proto_2fCommon_2eproto__INCLUDED
